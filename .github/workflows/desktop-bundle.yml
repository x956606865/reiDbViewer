name: desktop-bundles

on:
  push:
    tags:
      - 'desktop-v*'
  workflow_dispatch:
    inputs:
      profile:
        description: 'Optional profile name (e.g. nightly, beta)'
        required: false

jobs:
  bundle:
    name: Bundle ${{ matrix.os_label }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-22.04
            os_label: linux
            artifact_glob: apps/desktop/src-tauri/target/release/bundle/appimage/*.AppImage
          - runner: macos-13
            os_label: macos-x64
            artifact_glob: apps/desktop/src-tauri/target/release/bundle/dmg/*.dmg
          - runner: windows-latest
            os_label: windows
            artifact_glob: apps/desktop/src-tauri/target/release/bundle/nsis/*.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure macOS signing environment
        if: runner.os == 'macOS'
        shell: bash
        run: |
          if [ -z "${{ secrets.APPLE_CERTIFICATE }}" ]; then
            echo 'APPLE_CERTIFICATE secret not set, skip signing environment setup.'
            exit 0
          fi

          write_secret() {
            local name="$1"
            local value="$2"
            if [ -n "$value" ]; then
              if [ "$name" = "APPLE_CERTIFICATE" ]; then
                {
                  echo "${name}<<'EOF'"
                  echo "$value"
                  echo 'EOF'
                } >> "$GITHUB_ENV"
              else
                echo "${name}=$value" >> "$GITHUB_ENV"
              fi
            fi
          }

          write_secret "APPLE_CERTIFICATE" "${{ secrets.APPLE_CERTIFICATE }}"
          write_secret "APPLE_CERTIFICATE_PASSWORD" "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
          write_secret "APPLE_TEAM_ID" "${{ secrets.APPLE_TEAM_ID }}"
          write_secret "APPLE_SIGNING_IDENTITY" "${{ secrets.APPLE_SIGNING_IDENTITY }}"
          write_secret "APPLE_PROVIDER_SHORT_NAME" "${{ secrets.APPLE_PROVIDER_SHORT_NAME }}"
          write_secret "APPLE_NOTARIZE_APPLE_ID" "${{ secrets.APPLE_NOTARIZE_APPLE_ID }}"
          write_secret "APPLE_NOTARIZE_PASSWORD" "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"
          write_secret "APPLE_NOTARIZE_TEAM_ID" "${{ secrets.APPLE_NOTARIZE_TEAM_ID }}"

      - name: Configure Windows signing environment
        if: runner.os == 'Windows'
        shell: bash
        run: |
          if [ -z "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" ]; then
            echo 'TAURI_SIGNING_PRIVATE_KEY secret not set, skip signing environment setup.'
            exit 0
          fi

          write_secret() {
            local name="$1"
            local value="$2"
            if [ -n "$value" ]; then
              if [ "$name" = "TAURI_SIGNING_PRIVATE_KEY" ] || [ "$name" = "TAURI_PRIVATE_KEY" ]; then
                {
                  echo "${name}<<'EOF'"
                  echo "$value"
                  echo 'EOF'
                } >> "$GITHUB_ENV"
              else
                echo "${name}=$value" >> "$GITHUB_ENV"
              fi
            fi
          }

          write_secret "TAURI_SIGNING_PRIVATE_KEY" "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}"
          write_secret "TAURI_SIGNING_PRIVATE_KEY_PASSWORD" "${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}"
          write_secret "TAURI_PRIVATE_KEY" "${{ secrets.TAURI_PRIVATE_KEY }}"
          write_secret "TAURI_KEY_PASSWORD" "${{ secrets.TAURI_KEY_PASSWORD }}"

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            apps/desktop/src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      - name: Enable Corepack and set pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
        shell: bash

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Build desktop bundles
        env:
          NODE_OPTIONS: --max_old_space_size=4096
        run: pnpm --filter @rei-db-view/desktop build:tauri

      - name: Upload bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reidbview-desktop-${{ matrix.os_label }}
          path: ${{ matrix.artifact_glob }}
          if-no-files-found: error

  publish-release:
    name: Publish release
    runs-on: ubuntu-22.04
    needs: bundle
    if: startsWith(github.ref, 'refs/tags/desktop-v')
    permissions:
      contents: write
    steps:
      - name: Download bundle artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: reidbview-desktop-*

      - name: Display downloaded files
        run: ls -R dist

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
          generate_release_notes: true
          make_latest: true
